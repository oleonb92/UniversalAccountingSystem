# Generated by Django 5.1.9 on 2025-06-14 12:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="PendingInvitation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("username", models.CharField(max_length=150)),
                ("requested_at", models.DateTimeField(auto_now_add=True)),
                ("is_approved", models.BooleanField(default=False)),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("owner", "Owner"),
                            ("admin", "Admin"),
                            ("member", "Member"),
                            ("accountant", "Accountant"),
                            ("bookkeeper", "Bookkeeper"),
                            ("advisor", "Financial Advisor"),
                        ],
                        default="member",
                        max_length=20,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("owner", "Owner"),
                            ("admin", "Admin"),
                            ("member", "Member"),
                            ("accountant", "Accountant"),
                            ("bookkeeper", "Bookkeeper"),
                            ("advisor", "Financial Advisor"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("was_approved", models.BooleanField(default=False)),
                ("birthdate", models.DateField(blank=True, null=True)),
                (
                    "preferred_language",
                    models.CharField(
                        choices=[("en", "English"), ("es", "Spanish")],
                        default="en",
                        max_length=2,
                    ),
                ),
                (
                    "notification_preferences",
                    models.JSONField(blank=True, default=dict),
                ),
                ("ai_assistant_enabled", models.BooleanField(default=True)),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("personal", "Personal"),
                            ("accountant", "Accountant"),
                        ],
                        default="personal",
                        help_text="Tipo de cuenta: personal o contador.",
                        max_length=20,
                    ),
                ),
                (
                    "pro_features",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el usuario tiene acceso global a funcionalidades Pro (ej: contador pro).",
                    ),
                ),
                (
                    "pro_trial_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha hasta la que el usuario tiene trial Pro activo.",
                        null=True,
                    ),
                ),
                (
                    "pro_features_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        help_text="Lista de features Pro activas para este usuario.",
                        size=None,
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(blank=True, null=True, upload_to="avatars/"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="custom_user_groups",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
